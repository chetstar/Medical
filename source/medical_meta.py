"""This file contains the column_names and column_specifications for the Medi-Cal Tape along
with data dictionaries to tranlate numeric codes into English"""

import json

hcpcode_translation = {"300":"Alliance", "340":"Blue Cross", "051":"Center for Elders",
                       "056":"ONLOK Seniors", "000":"z No Plan", None:"z No Plan"}

language_translation = {'B': 'Chinese', 'P': 'Portugese', 'A': 'Other Sign', 'D': 'Cambodian', 
                        '2': 'Cantonese', 'N': 'Russian', None: 'Missing', '1': 'Spanish', 
                        '3': 'Japanese', 'G': 'Mien', '4': 'Korean', '5': 'Tagalog', 
                        'C': 'Other Chinese', 'V': 'Vietnamese', '0': 'American Sign', 
                        '7': 'English', 'S': 'Samoan', 'J': 'Hebrew', 'U': 'Farsi', 
                        'R': 'Arabic', 'Q': 'Italian', 'M': 'Polish', 'F': 'Llacano', 
                        '9': 'Missing', '8': 'Missing', 'I': 'Lao', 'H': 'Hmong', '6': 'Other', 
                        'T': 'Thai', 'K': 'French', 'E': 'Armenian'}

ethnicity_translation = {'A': 'Asian/PI', 'C': 'Asian/PI', '0': 'Unknown', 'H': 'Asian/PI', 
                         'K': 'Asian/PI', 'J': 'Asian/PI', 'M': 'Asian/PI', 'N': 'Asian/PI', 
                         'P': 'Asian/PI', 'R': 'Asian/PI', '4': 'Asian/PI', '7': 'Asian/PI', 
                         'V': 'Asian/PI', '9': 'Unknown', '8': 'Unknown', 'T': 'Asian/PI',
                         '1': 'Caucasian', '2': 'Latino', '3': 'Aftrican American',
                         '5': 'Native American', 'Z': 'Other'}

with open('city_names.json', 'r') as f:
    city_translation = json.load(f)

translation_dictionary = {"HCplanText":hcpcode_translation,
                          "language":language_translation,
                          "city":city_translation,
                          "ethnicity":ethnicity_translation}

#column_names is used by the pandas.DataFrame.fwf command to name the columns it reads in.
#Each name in column_names matches with a tuple in column_specifications.

column_names = ['ssn', 'HIC', 'V2', 'year', 'month', 'day', 'sex', 'race', 'lang', 'V4', 'CaseName', 'lname', 'fname', 'middleInitial', 'suffix', 'V15', 'street', 'V12', 'city', 'state', 'zip', 'EWcode', 'CIN', 'GOVT', 'CountyCaseCode', 'CountyAidCode', 'CountyCaseID', 'v60', 'CMS', 'v601', 'eligYear', 'eligMonth', 'AidCode', 'RespCounty', 'ResCounty', 'EligibilityStatus', 'SOCamount', 'MedicareStatus', 'CarrierCode', 'FederalContractNumber', 'PlanID', 'TypeID', 'v16', 'HCPstatus', 'HCPcode', 'OHC', 'v70', 'AidCodeSP1', 'RespCountySP1', 'EligibilityStatusSP1', 'AidCodeSP2', 'RespCountySP2', 'EligibilityStatusSP2', 'SOCpctSP', 'HF_EligDay_SP', 'AidCodeSP3', 'RespCountySP3', 'EligibilityStatusSP3', 'V17', 'eligYear1', 'eligMonth1', 'AidCode1', 'RespCounty1', 'ResCounty1', 'EligibilityStatus1', 'SOCamount1', 'MedicareStatus1', 'CarrierCode1', 'FederalContractNumber1', 'PlanID1', 'TypeID1', 'V20', 'HCPstatus1', 'HCPcode1', 'OHC1', 'V21', 'AidCodeSP1_1', 'RespCountySP1_1', 'EligibilityStatusSP1_1', 'AidCodeSP2_1', 'RespCountySP2_1', 'EligibilityStatusSP2_1', 'SOCpctSP_1', 'HF_EligDay_SP_1', 'AidCodeSP3_1', 'RespCountySP3_1', 'EligibilityStatusSP3_1', 'v22', 'EligYear2', 'EligMonth2', 'AidCode2', 'RespCounty2', 'ResCounty2', 'EligibilityStatus2', 'SocAmount2', 'MedicareStatus2', 'CarrierCode2', 'FederalContractNumber2', 'PlanID2', 'TypeID2', 'v25', 'HCPstatus2', 'HCPcode2', 'OHC2', 'v26', 'AidCodeSP1_2', 'RespCountySP1_2', 'EligibilityStatusSP1_2', 'AidCodeSP2_2', 'RespCountySP2_2', 'EligibilityStatusSP2_2', 'SOCpctSP_2', 'HF_EligDay_SP_2', 'AidCodeSP3_2', 'RespCountySP3_2', 'EligibilityStatusSP3_2', 'v27', 'eligYear3', 'eligMonth3', 'AidCode3', 'RespCounty3', 'ResCounty3', 'EligibilityStatus3', 'SOCamount3', 'MedicareStatus3', 'CarrierCode3', 'FederalContractNumber3', 'PlanID3', 'TypeID3', 'V28', 'HCPstatus3', 'HCPcode3', 'OHC3', 'v29', 'AidCodeSP1_3', 'RespCountySP1_3', 'EligibilityStatusSP1_3', 'AidCodeSP2_3', 'RespCountySP2_3', 'EligibilityStatusSP2_3', 'SOCpctSP_3', 'HF_EligDay_SP_3', 'AidCodeSP3_3', 'RespCountySP3_3', 'EligibilityStatusSP3_3', 'V66', 'eligYear4', 'eligMonth4', 'AidCode4', 'RespCounty4', 'ResCounty4', 'EligibilityStatus4', 'SOCamount4', 'MedicareStatus4', 'CarrierCode4', 'FederalContractNumber4', 'PlanID4', 'TypeID4', 'v30', 'HCPstatus4', 'HCPcode4', 'OHC4', 'v31', 'AidCodeSP1_4', 'RespCountySP1_4', 'EligibilityStatusSP1_4', 'AidCodeSP2_4', 'RespCountySP2_4', 'EligibilityStatusSP2_4', 'SOCpctSP_4', 'HF_EligDay_SP_4', 'AidCodeSP3_4', 'RespCountySP3_4', 'EligibilityStatusSP3_4', 'v55', 'eligYear5', 'eligMonth5', 'AidCode5', 'RespCounty5', 'ResCounty5', 'EligibilityStatus5', 'SOCamount5', 'MedicareStatus5', 'CarrierCode5', 'FederalContractNumber5', 'PlanID5', 'TypeID5', 'v32', 'HCPstatus5', 'HCPcode5', 'OHC5', 'v33', 'AidCodeSP1_5', 'RespCountySP1_5', 'EligibilityStatusSP1_5', 'AidCodeSP2_5', 'RespCountySP2_5', 'EligibilityStatusSP2_5', 'SOCpctSP_5', 'HF_EligDay_SP_5', 'AidCodeSP3_5', 'RespCountySP3_5', 'EligibilityStatusSP3_5', 'v56', 'eligYear6', 'eligMonth6', 'AidCode6', 'RespCounty6', 'ResCounty6', 'EligibilityStatus6', 'SOCamount6', 'MedicareStatus6', 'CarrierCode6', 'FederalContractNumber6', 'PlanID6', 'TypeID6', 'v34', 'HCPstatus6', 'HCPcode6', 'OHC6', 'v35', 'AidCodeSP1_6', 'RespCountySP1_6', 'EligibilityStatusSP1_6', 'AidCodeSP2_6', 'RespCountySP2_6', 'EligibilityStatusSP2_6', 'SOCpctSP_6', 'HF_EligDay_SP_6', 'AidCodeSP3_6', 'RespCountySP3_6', 'EligibilityStatusSP3_6', 'v68', 'eligYear7', 'eligMonth7', 'AidCode7', 'RespCounty7', 'ResCounty7', 'EligibilityStatus7', 'SOCamount7', 'MedicareStatus7', 'CarrierCode7', 'FederalContractNumber7', 'PlanID7', 'TypeID7', 'v36', 'HCPstatus7', 'HCPcode7', 'OHC7', 'v37', 'AidCodeSP1_7', 'RespCountySP1_7', 'EligibilityStatusSP1_7', 'AidCodeSP2_7', 'RespCountySP2_7', 'EligibilityStatusSP2_7', 'SOCpctSP_7', 'HF_EligDay_SP_7', 'AidCodeSP3_7', 'RespCountySP3_7', 'EligibilityStatusSP3_7', 'v58', 'eligYear8', 'eligMonth8', 'AidCode8', 'RespCounty8', 'ResCounty8', 'EligibilityStatus8', 'SOCamount8', 'MedicareStatus8', 'CarrierCode8', 'FederalContractNumber8', 'PlanID8', 'TypeID8', 'v38', 'HCPstatus8', 'HCPcode8', 'OHC8', 'v39', 'AidCodeSP1_8', 'RespCountySP1_8', 'EligibilityStatusSP1_8', 'AidCodeSP2_8', 'RespCountySP2_8', 'EligibilityStatusSP2_8', 'SOCpctSP_8', 'HF_EligDay_SP_8', 'AidCodeSP3_8', 'RespCountySP3_8', 'EligibilityStatusSP3_8', 'v59', 'eligYear9', 'eligMonth9', 'AidCode9', 'RespCounty9', 'ResCounty9', 'EligibilityStatus9', 'SOCamount9', 'MedicareStatus9', 'CarrierCode9', 'FederalContractNumber9', 'PlanID9', 'TypeID9', 'v40', 'HCPstatus9', 'HCPcode9', 'OHC9', 'v41', 'AidCodeSP1_9', 'RespCountySP1_9', 'EligibilityStatusSP1_9', 'AidCodeSP2_9', 'RespCountySP2_9', 'EligibilityStatusSP2_9', 'SOCpctSP_9', 'HF_EligDay_SP_9', 'AidCodeSP3_9', 'RespCountySP3_9', 'EligibilityStatusSP3_9', 'v61', 'eligYear10', 'eligMonth10', 'AidCode10', 'RespCounty10', 'ResCounty10', 'EligibilityStatus10', 'SOCamount10', 'MedicareStatus10', 'CarrierCode10', 'FederalContractNumber10', 'PlanID10', 'TypeID10', 'v42', 'HCPstatus10', 'HCPcode10', 'OHC10', 'v43', 'AidCodeSP1_10', 'RespCountySP1_10', 'EligibilityStatusSP1_10', 'AidCodeSP2_10', 'RespCountySP2_10', 'EligibilityStatusSP2_10', 'SOCpctSP_10', 'HF_EligDay_SP_10', 'AidCodeSP3_10', 'RespCountySP3_10', 'EligibilityStatusSP3_10', 'v61a', 'eligYear11', 'eligMonth11', 'AidCode11', 'RespCounty11', 'ResCounty11', 'EligibilityStatus11', 'SOCamount11', 'MedicareStatus11', 'CarrierCode11', 'FederalContractNumber11', 'PlanID11', 'TypeID11', 'v44', 'HCPstatus11', 'HCPcode11', 'OHC11', 'v45', 'AidCodeSP1_11', 'RespCountySP1_11', 'EligibilityStatusSP1_11', 'AidCodeSP2_11', 'RespCountySP2_11', 'EligibilityStatusSP2_11', 'SOCpctSP_11', 'HF_EligDay_SP_11', 'AidCodeSP3_11', 'RespCountySP3_11', 'EligibilityStatusSP3_11', 'v69', 'eligYear12', 'eligMonth12', 'AidCode12', 'RespCounty12', 'ResCounty12', 'EligibilityStatus12', 'SOCamount12', 'MedicareStatus12', 'CarrierCode12', 'FederalContractNumber12', 'PlanID12', 'TypeID12', 'v46', 'HCPstatus12', 'HCPcode12', 'OHC12', 'v47', 'AidCodeSP1_12', 'RespCountySP1_12', 'EligibilityStatusSP1_12', 'AidCodeSP2_12', 'RespCountySP2_12', 'EligibilityStatusSP2_12', 'SOCpctSP_12', 'HF_EligDay_SP_12', 'AidCodeSP3_12', 'RespCountySP3_12', 'EligibilityStatusSP3_12', 'v62', 'eligYear13', 'eligMonth13', 'AidCode13', 'RespCounty13', 'ResCounty13', 'EligibilityStatus13', 'SOCamount13', 'MedicareStatus13', 'CarrierCode13', 'FederalContractNumber13', 'PlanID13', 'TypeID13', 'v48', 'HCPstatus13', 'HCPcode13', 'OHC13', 'v49', 'AidCodeSP1_13', 'RespCountySP1_1', 'EligibilityStatusSP1_13', 'AidCodeSP2_13', 'RespCountySP2_13', 'EligibilityStatusSP2_13', 'SOCpctSP_13', 'HF_EligDay_SP_13', 'AidCodeSP3_13', 'RespCountySP3_13', 'EligibilityStatusSP3_13', 'v63', 'eligYear14', 'eligMonth14', 'AidCode14', 'RespCounty14', 'ResCounty14', 'EligibilityStatus14', 'SOCamount14', 'MedicareStatus14', 'CarrierCode14', 'FederalContractNumber14', 'PlanID14', 'TypeID14', 'v50', 'HCPstatus14', 'HCPcode14', 'OHC14', 'v51', 'AidCodeSP1_14', 'RespCountySP1_14', 'EligibilityStatusSP1_14', 'AidCodeSP2_14', 'RespCountySP2_14', 'EligibilityStatusSP2_14', 'SOCpctSP_14', 'HF_EligDay_SP_14', 'AidCodeSP3_14', 'RespCountySP3_14', 'EligibilityStatusSP3_14', 'v64', 'eligYear15', 'eligMonth15', 'AidCode15', 'RespCounty15', 'ResCounty15', 'EligibilityStatus15', 'SOCamount15', 'MedicareStatus15', 'CarrierCode15', 'FederalContractNumber15', 'PlanID15', 'TypeID15', 'v52', 'HCPstatus15', 'HCPcode15', 'OHC15', 'v53', 'AidCodeSP1_15', 'RespCountySP1_15', 'EligibilityStatusSP1_15', 'AidCodeSP2_15', 'RespCountySP2_15', 'EligibilityStatusSP2_15', 'SOCpctSP_15', 'HF_EligDay_SP_15', 'AidCodeSP3_15', 'RespCountySP3_15', 'EligibilityStatusSP3_15', 'v65']

column_specifications = [(0, 8), (9, 18), (19, 20), (21, 24), (25, 26), (27, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 50), (51, 70), (71, 85), (86, 86), (87, 89), (90, 127), (128, 159), (160, 177), (178, 197), (198, 199), (200, 204), (205, 208), (209, 217), (218, 218), (219, 220), (221, 222), (223, 229), (230, 233), (234, 234), (235, 242), (243, 246), (247, 248), (249, 250), (251, 252), (253, 254), (255, 257), (258, 262), (263, 265), (266, 269), (270, 274), (275, 277), (278, 279), (280, 289), (290, 291), (292, 294), (295, 295), (296, 298), (299, 300), (301, 302), (303, 305), (306, 307), (308, 309), (310, 312), (313, 314), (315, 318), (319, 320), (321, 322), (323, 325), (326, 335), (336, 339), (340, 341), (342, 343), (344, 345), (346, 347), (348, 350), (351, 355), (356, 358), (359, 362), (363, 367), (368, 370), (371, 372), (373, 382), (383, 384), (385, 387), (388, 388), (389, 391), (392, 393), (394, 395), (396, 398), (399, 400), (401, 402), (403, 405), (406, 407), (408, 411), (412, 413), (414, 415), (416, 418), (419, 428), (429, 432), (433, 434), (435, 436), (437, 438), (439, 440), (441, 443), (444, 448), (449, 451), (452, 455), (456, 460), (461, 463), (464, 465), (466, 475), (476, 477), (478, 480), (481, 481), (482, 484), (485, 486), (487, 488), (489, 491), (492, 493), (494, 495), (496, 498), (499, 500), (501, 504), (505, 506), (507, 508), (509, 511), (512, 521), (522, 525), (526, 527), (528, 529), (530, 531), (532, 533), (534, 536), (537, 541), (542, 544), (545, 548), (549, 553), (554, 556), (557, 558), (559, 568), (569, 570), (571, 573), (574, 574), (575, 577), (578, 579), (580, 581), (582, 584), (585, 586), (587, 588), (589, 591), (592, 593), (594, 597), (598, 599), (600, 601), (602, 604), (605, 614), (615, 618), (619, 620), (621, 622), (623, 624), (625, 626), (627, 629), (630, 634), (635, 637), (638, 641), (642, 646), (647, 649), (651, 651), (652, 661), (662, 663), (664, 666), (667, 667), (668, 670), (671, 672), (673, 674), (675, 677), (678, 679), (680, 681), (682, 684), (685, 686), (687, 690), (691, 692), (693, 694), (695, 697), (698, 707), (708, 711), (712, 713), (714, 715), (716, 717), (718, 719), (720, 722), (723, 727), (728, 730), (731, 734), (735, 739), (740, 742), (743, 744), (745, 754), (755, 756), (757, 759), (760, 760), (761, 763), (764, 765), (766, 767), (768, 770), (771, 772), (773, 774), (775, 777), (778, 779), (780, 783), (784, 785), (786, 787), (788, 790), (791, 800), (801, 804), (805, 806), (807, 808), (809, 810), (811, 812), (813, 815), (816, 820), (821, 823), (824, 827), (828, 832), (833, 835), (836, 837), (838, 847), (848, 849), (850, 852), (853, 853), (854, 856), (857, 858), (859, 860), (861, 863), (864, 865), (866, 867), (868, 870), (871, 872), (873, 876), (877, 878), (879, 880), (881, 883), (884, 893), (894, 897), (898, 899), (900, 901), (902, 903), (904, 905), (906, 908), (909, 913), (914, 916), (917, 920), (921, 925), (926, 928), (929, 930), (931, 940), (941, 942), (943, 945), (946, 946), (947, 949), (950, 951), (952, 953), (954, 956), (957, 958), (959, 960), (961, 963), (964, 965), (966, 969), (970, 971), (972, 973), (974, 976), (977, 986), (987, 990), (991, 992), (993, 994), (995, 996), (997, 998), (999, 1001), (1002, 1006), (1007, 1009), (1010, 1013), (1014, 1018), (1019, 1021), (1022, 1023), (1024, 1033), (1034, 1035), (1036, 1038), (1039, 1039), (1040, 1042), (1043, 1044), (1045, 1046), (1047, 1049), (1050, 1051), (1052, 1053), (1054, 1056), (1057, 1058), (1059, 1062), (1063, 1064), (1065, 1066), (1067, 1069), (1070, 1079), (1080, 1083), (1084, 1085), (1086, 1087), (1088, 1089), (1090, 1091), (1092, 1094), (1095, 1099), (1100, 1102), (1103, 1106), (1107, 1111), (1112, 1114), (1115, 1116), (1117, 1126), (1127, 1128), (1129, 1131), (1132, 1132), (1133, 1135), (1136, 1137), (1138, 1139), (1140, 1142), (1143, 1144), (1145, 1146), (1147, 1149), (1150, 1151), (1152, 1155), (1156, 1157), (1158, 1159), (1160, 1162), (1163, 1172), (1173, 1176), (1177, 1178), (1179, 1180), (1181, 1182), (1183, 1184), (1185, 1187), (1188, 1192), (1193, 1195), (1196, 1199), (1200, 1204), (1205, 1207), (1208, 1209), (1210, 1219), (1220, 1221), (1222, 1224), (1225, 1225), (1226, 1228), (1229, 1230), (1231, 1232), (1233, 1235), (1236, 1237), (1238, 1239), (1240, 1242), (1243, 1244), (1245, 1248), (1249, 1250), (1251, 1252), (1253, 1255), (1256, 1265), (1266, 1269), (1270, 1271), (1272, 1273), (1274, 1275), (1276, 1277), (1278, 1280), (1281, 1285), (1286, 1288), (1289, 1292), (1293, 1297), (1298, 1300), (1301, 1302), (1303, 1312), (1313, 1314), (1315, 1317), (1318, 1318), (1319, 1321), (1322, 1323), (1324, 1325), (1326, 1328), (1329, 1330), (1331, 1332), (1333, 1335), (1336, 1337), (1338, 1341), (1342, 1343), (1344, 1345), (1346, 1348), (1349, 1358), (1359, 1362), (1363, 1364), (1365, 1366), (1367, 1368), (1369, 1370), (1371, 1373), (1374, 1378), (1379, 1381), (1382, 1385), (1386, 1390), (1391, 1393), (1394, 1395), (1396, 1405), (1406, 1407), (1408, 1410), (1411, 1411), (1412, 1414), (1415, 1416), (1417, 1418), (1419, 1421), (1422, 1423), (1424, 1425), (1426, 1428), (1429, 1430), (1431, 1434), (1435, 1436), (1437, 1438), (1439, 1441), (1442, 1451), (1452, 1455), (1456, 1457), (1458, 1459), (1460, 1461), (1462, 1463), (1464, 1466), (1467, 1471), (1472, 1474), (1475, 1478), (1479, 1483), (1484, 1486), (1487, 1488), (1489, 1498), (1499, 1500), (1501, 1503), (1504, 1504), (1505, 1507), (1508, 1509), (1510, 1511), (1512, 1514), (1515, 1516), (1517, 1518), (1519, 1521), (1522, 1523), (1524, 1527), (1528, 1529), (1530, 1531), (1532, 1534), (1535, 1544), (1545, 1548), (1549, 1550), (1551, 1552), (1553, 1554), (1555, 1556), (1557, 1559), (1560, 1564), (1565, 1567), (1568, 1571), (1572, 1576), (1577, 1579), (1580, 1581), (1582, 1591), (1592, 1593), (1594, 1596), (1597, 1597), (1598, 1600), (1601, 1602), (1603, 1604), (1605, 1607), (1608, 1609), (1610, 1611), (1612, 1614), (1615, 1616), (1617, 1620), (1621, 1622), (1623, 1624), (1625, 1627), (1628, 1637), (1638, 1641), (1642, 1643), (1644, 1645), (1646, 1647), (1648, 1649), (1650, 1652), (1653, 1657), (1658, 1660), (1661, 1664), (1665, 1669), (1670, 1672), (1673, 1674), (1675, 1684), (1685, 1686), (1687, 1689), (1690, 1690), (1691, 1693), (1694, 1695), (1696, 1697), (1698, 1700), (1701, 1702), (1703, 1704), (1705, 1707), (1708, 1709), (1710, 1713), (1714, 1715), (1716, 1717), (1718, 1720), (1721, 1778)]

column_lengths = {}
for tuple_ in zip(column_names, column_specifications):
    print(tuple_)
    column_length = int(tuple_[1][1]) - int(tuple_[1][0]) + 1
    column_lengths[tuple_[0]] = column_length

translation_lengths = {}
for key in translation_dictionary:
    max_value_length = 0
    for value in translation_dictionary[key].values():
        if len(value) > max_value_length:
            max_value_length = len(value)
    translation_lengths[key] = max_value_length

column_converters = {}
for name in column_names:
    column_converters[name]=str
